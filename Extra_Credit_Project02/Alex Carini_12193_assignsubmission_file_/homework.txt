Question 1:
def rectangle(m,n):
    for i in range(m):
        print(n*'*')

        
rectangle(3,4)

Question 2:
import random
def random_dig(n):
    x = random.randint(10**(n-1), 10**n-1)
    
    return x
    
print(random_dig(3))

Question 3:
def number_of_factors(N):
    factor_list = []
    for d in range(1,N+1):
        if(N%d ==0):
            factor_list.append(d)
    return len(factor_list)

number_of_factors(4)
 
Question 4:
def first_diff(s1,s2):
    s1 = s1.upper()
    s2 = s2.upper()
    if(s1==s2):
        print('two strings are identical')
        diff = -1
    else:
        diff = min(len(s1), len(s2))
        for idx in range(min(len(s1), len(s2))):            
            if not (s1[idx]==s2[idx]):
                diff = idx
                break
    return diff         

print('case 0:')
first_diff('Hello', 'hello')
print('case 1: same length - diff at index', first_diff('Hello', 'hellp'))
print('case 2: diff length - diff at index', first_diff('Hel', 'hellp'))
print('case 3: diff length - diff at index', first_diff('Hello', 'hel'))
print('case 4: same length, all diff - diff at index', first_diff('Hello', 'arr'))

Question 5:
def root(x=1, n=2):
    try:    
        assert x > 0, "base x must be greater than zero."
        result = x**(1/n)
        return result
    except ZeroDivisionError as e:
        print(f'Error: {e}')
    except TypeError as e:
        print(f'Error: {e}')
    except ValueError as e:
        print(f'Error: {e}')
    except OverflowError as e:
        print(f'Error: {e}')
    except AssertionError as e:
        print(f'Error: {e}')
    except MemoryError as e:
        print(f'Error: {e}')
    else:
        print('Other Errors')
    finally: 
        print('Code is Complete here!')


root(-8, 3)
root(8, 0)
root(10**1000, 3)
root('hello', 3)

Extra Credit Questions

Question 6:
def solve_system(a, b, c, d, e, f):
  det = a * d - b * c

  if det == 0:
        return "The system has no unique solution."

  x = (e * d - b * f) / det
  y = (a * f - e * c) / det

  return x, y
x, y = solve_system(1, 2, 3, 4, 5, 6)
print(f"x = {x}, y = {y}")

Question 7:
def change_case(s):
  return s.swapcase()
result = change_case("Test")
print(result)

Question 8:
def is_prime(num):
    
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def primes(n=100):
   
    prime_list = []
    current_num = 2  

    while len(prime_list) < n:
        if is_prime(current_num):
            prime_list.append(current_num)
        current_num += 1

    return prime_list

Question 9:
import random

def place_O(board):
   
    empty_spots = [(i, j) for i in range(3) for j in range(3) if board[i][j] == 0]
    
    if empty_spots:
       
        chosen_spot = random.choice(empty_spots)
        board[chosen_spot[0]][chosen_spot[1]] = 2 
        return board
    else:
        return "No empty spots available."

Question 10:
def is_valid_sudoku(board):
    """Check if the given 9x9 Sudoku board is solved correctly."""
    def is_valid_group(group):
        """Check if a group (row, column, or block) contains no duplicates."""
        nums = [num for num in group if num != 0]
        return len(nums) == len(set(nums))

    for row in board:
        if not is_valid_group(row):
            return False

    for col in range(9):
        if not is_valid_group([board[row][col] for row in range(9)]):
            return False

    for block_row in range(3):
        for block_col in range(3):
            block = [board[row][col]
                     for row in range(block_row * 3, block_row * 3 + 3)
                     for col in range(block_col * 3, block_col * 3 + 3)]
            if not is_valid_group(block):
                return False

    return True